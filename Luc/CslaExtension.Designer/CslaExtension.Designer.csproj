<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">x86</Platform>
    <ProductVersion>10.0.20805</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{A94CB490-8B9D-40E2-9609-ADDC31226349}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>CslaExtension</RootNamespace>
    <AssemblyName>CslaExtension</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <PlatformTarget>x86</PlatformTarget>
    <SccProjectName>SAK</SccProjectName>
    <SccLocalPath>SAK</SccLocalPath>
    <SccAuxPath>SAK</SccAuxPath>
    <SccProvider>SAK</SccProvider>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x86' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup>
    <SignAssembly>false</SignAssembly>
  </PropertyGroup>
  <PropertyGroup>
    <AssemblyOriginatorKeyFile>
    </AssemblyOriginatorKeyFile>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="EnvDTE, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
      <EmbedInteropTypes>False</EmbedInteropTypes>
    </Reference>
    <Reference Include="Microsoft.Data.Entity.Design.Extensibility, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <SpecificVersion>True</SpecificVersion>
      <Private>False</Private>
      <EmbedInteropTypes>False</EmbedInteropTypes>
    </Reference>
    <Reference Include="Microsoft.VisualStudio.ExtensibilityHosting, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <SpecificVersion>True</SpecificVersion>
      <Private>False</Private>
    </Reference>
    <Reference Include="Microsoft.VisualStudio.TemplateWizardInterface, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.ComponentModel.Composition" />
    <Reference Include="System.Core">
      <RequiredTargetFramework>3.5</RequiredTargetFramework>
    </Reference>
    <Reference Include="System.Data" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="Microsoft.CSharp">
      <RequiredTargetFramework>4.0</RequiredTargetFramework>
    </Reference>
    <Reference Include="System.XML" />
    <Reference Include="System.Xml.Linq" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Designer\Constants.cs" />
    <Compile Include="Designer\CslaDesignerExtension.cs" />
    <Compile Include="Designer\CslaDesignerExtensionFactory.cs" />
    <Compile Include="Designer\CslaModifier.cs" />
    <Compile Include="Designer\CslaMultipleFilesOutput.cs" />
    <Compile Include="Designer\CslaPropertyExtension.cs" />
    <Compile Include="Designer\CslaPropertyExtensionFactory.cs" />
    <Compile Include="Designer\CslaNavigationExtension.cs" />
    <Compile Include="Designer\CslaNavigationExtensionFactory.cs" />
    <Compile Include="Designer\CslaRequired.cs" />
    <Compile Include="Designer\CslaType.cs" />
    <Compile Include="Designer\ModelConversionExtension.cs" />
    <Compile Include="Designer\ModelGenerationExtension.cs" />
    <Compile Include="Designer\ModelTransformExtension.cs" />
    <Compile Include="Designer\CslaEntityExtension.cs" />
    <Compile Include="Designer\CslaEntityExtensionFactory.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Designer\PropertyManager.cs" />
    <Compile Include="Wizard\CslaExtensionWizard.cs" />
    <Compile Include="Wizard\ModelChoser.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="Wizard\ModelChoser.Designer.cs">
      <DependentUpon>ModelChoser.cs</DependentUpon>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <Content Include="Documentation\ADO.NET Entity Data Model Designer Extension Starter Kit License Terms.txt" />
  </ItemGroup>
  <ItemGroup>
    <Content Include="Documentation\StarterKit.htm" />
  </ItemGroup>
  <ItemGroup>
    <Service Include="{508349B6-6B84-4DF5-91F0-309BEEBAD82D}" />
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="Wizard\ModelChoser.resx">
      <DependentUpon>ModelChoser.cs</DependentUpon>
    </EmbeddedResource>
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Debug|x86'">
    <StartAction>Program</StartAction>
    <StartProgram>$(DevEnvDir)\devenv.exe</StartProgram>
    <StartWorkingDirectory>$(DevEnvDir)</StartWorkingDirectory>
  </PropertyGroup>
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
  <Target Name="BeforeBuild" DependsOnTargets="CreateItemTemplate" />
  <Target Name="AfterBuild" DependsOnTargets="CreateVsixPackage" />
  <!--
    Call the <CreateZipPackage> inline MSBuild task to create a .vsix (zip) file with project items whose "Build Action" is "VsixContent"
   -->
  <Target Name="CreateItemTemplate">
    <ItemGroup>
      <ItemTemplateContent Include="$(ProjectDir)Template\CslaExtension.tt" />
      <ItemTemplateContent Include="$(ProjectDir)Template\__TemplateIcon.ico" />
      <ItemTemplateContent Include="$(ProjectDir)Template\ADONETArtifactGenerator_CslaExtension.vstemplate" />
      <ItemTemplateFilePath Include="$(OutDir)CslaExtension.zip" />
    </ItemGroup>
    <CreateZipPackage ZipFileContents="@(ItemTemplateContent)" ZipFilePath="@(ItemTemplateFilePath)" />
  </Target>
  <Target Name="CreateVsixPackage">
    <ItemGroup>
      <!-- Always include the output assembly in the .vsix file -->
      <VsixContent Include="$(OutDir)$(TargetFileName)" />
      <VsixContent Include="$(OutDir)CslaExtension.zip" />
      <VsixFilePath Include="$(OutDir)$(TargetName).vsix" />
    </ItemGroup>
    <CreateZipPackage ZipFileContents="@(VsixContent)" ZipFilePath="@(VsixFilePath)" />
  </Target>
  <!--
        Inline MSBuild task to create a zip file with System.IO.Packaging APIs
        [IN] ZipFileContents: ITaskItems to include in the zip file
        [IN] ZipFilePath: pathname of the output zip file
  -->
  <UsingTask TaskName="CreateZipPackage" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" RequiredRuntime="v4.0">
    <ParameterGroup>
      <ZipFileContents ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <ZipFilePath ParameterType="Microsoft.Build.Framework.ITaskItem" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="$(programfiles)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0\WindowsBase.dll" />
      <Using Namespace="System.IO.Packaging" />
      <Using Namespace="System.Net.Mime" />
      <Code Type="Fragment" Language="cs"><![CDATA[
          Dictionary<String, String> fileExtensionMimeTypeLookup = new Dictionary<String, String>() {
                                    {".vsixmanifest", System.Net.Mime.MediaTypeNames.Text.Xml },
                                    {".dll", System.Net.Mime.MediaTypeNames.Application.Octet },
                                    {".exe", System.Net.Mime.MediaTypeNames.Application.Octet },
                                    {".txt", System.Net.Mime.MediaTypeNames.Text.Plain },
                                    {".htm", System.Net.Mime.MediaTypeNames.Text.Html },
                                    {".html", System.Net.Mime.MediaTypeNames.Text.Html },
                                    {".rtf", System.Net.Mime.MediaTypeNames.Text.RichText },
                                    {".vsix", System.Net.Mime.MediaTypeNames.Application.Zip },
                                    {".zip", System.Net.Mime.MediaTypeNames.Application.Zip },
                                    {".jpg", System.Net.Mime.MediaTypeNames.Image.Jpeg },
                                    {".jpeg", System.Net.Mime.MediaTypeNames.Image.Jpeg },
                                    {".gif", System.Net.Mime.MediaTypeNames.Image.Gif },
                                    {".tiff", System.Net.Mime.MediaTypeNames.Image.Tiff }
                                };
          
          if (ZipFileContents.Length > 0)
          {
            try
            {
              List<String> filesProcessed = new List<String>();
              
              // Create Zip package
              using (Package package = ZipPackage.Open(ZipFilePath.ItemSpec, FileMode.Create))
              {
                  foreach (ITaskItem file in ZipFileContents
                      //Always exclude the output file in case it is in Files
                      .Where(file => !string.Equals(new FileInfo(file.ItemSpec).FullName,
                                                    new FileInfo(ZipFilePath.ItemSpec).FullName,
                                                    StringComparison.OrdinalIgnoreCase)))
                  {
                      FileInfo fileInfo = new FileInfo(file.ItemSpec);
                      filesProcessed.Add(fileInfo.Name);
                     
                     //Hack to for the CslaExtension.zip file to be created in a "Template" subfolder in the VSIX file
                     string fileName = fileInfo.Name == "CslaExtension.zip" ? "Template\\" + fileInfo.Name : fileInfo.Name;
                      Uri filePartUri = PackUriHelper.CreatePartUri(new Uri(fileName, UriKind.Relative));

                      // Get MIME type
                      String mimeType = String.Empty;
                      if(fileExtensionMimeTypeLookup.TryGetValue(fileInfo.Extension, out mimeType) == false)
                      {
                        // Default to Xml
                        mimeType = System.Net.Mime.MediaTypeNames.Text.Xml;
                      }
                      
                      // Create package part
                      PackagePart packagePart = package.CreatePart(filePartUri, mimeType);
                      
                      // Copy streams intp package part
                      using (Stream sourceStream = new FileStream(file.ItemSpec, FileMode.Open, FileAccess.Read))
                      {
                          Stream targetStream = packagePart.GetStream();
                          
                          const int bufSize = 0x1000; //4KB
                          byte[] buf = new byte[bufSize];
                          int bytesRead = 0;
                          while ((bytesRead = sourceStream.Read(buf, 0, bufSize)) > 0)
                          {
                              targetStream.Write(buf, 0, bytesRead);
                          }
                      }
                  }
                  
                  Log.LogMessage(String.Format("Created \"{0}\" with files \"{1}\"", ZipFilePath.ItemSpec, String.Join(", ", filesProcessed.ToArray())), MessageImportance.High);
              }
            }
            catch (Exception ex)
            {
                //Report uncaught exceptions as a build failure.
                Log.LogErrorFromException(ex);
            }
          }
        ]]></Code>
    </Task>
  </UsingTask>
</Project>