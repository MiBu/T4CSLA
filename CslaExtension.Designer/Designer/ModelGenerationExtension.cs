using System;
using System.Linq;
using System.Xml.Linq;
using System.Windows.Forms;
using System.ComponentModel.Composition;
using Microsoft.Data.Entity.Design.Extensibility;
using EnvDTE;

namespace CslaExtension.Designer
{
  [PartCreationPolicy(CreationPolicy.Shared)]
  [Export(typeof(IModelGenerationExtension))]
  public class ModelGenerationExtension : IModelGenerationExtension
  {
    /// <summary>
    /// Called after an .edmx document is generated by the Entity Data Model Wizard or the Update Model Wizard.
    /// </summary>
    /// <param name="context"></param>
    public void OnAfterModelGenerated(ModelGenerationExtensionContext context)
    {
      //
      // context.CurrentDocument = The XDocument that will be saved.
      //                           An extension can modify this document. Note that the document may have been modified by another extension's implementation of OnAfterModelGenerated().
      //
      // context.GeneratedDocument = The original XDocument that was generated Entity Data Model Wizard or the Update Model Wizard.
      //                             An extension cannot modify this document.
      //
      // context.Project = The EnvDTE.Project that contains the .edmx file
      //
      // context.WizardKind = The wizard that initiated the .edmx file generation or update process. Possible values are WizardKind.Generate or WizardKind.UpdateModel.
      //
	  //bool efV2Model = IsEntityFrameworkV2Model(context.Project);
	  //String caption = "OnAfterModelGenerated called";
	  //String message = String.Format("An EF v{0} model was generated from the database by the '{1}' wizard.\n\n",
	  //                                efV2Model ? 2 : 1,
	  //                                context.WizardKind == WizardKind.Generate ? "Create Model" : "Update Model From Database");
	  //if (efV2Model)
	  //{
	  //  // Call helper method to add a new property to the generated EF v2 model.
	  //  AddPropertyToModel(context.CurrentDocument);

	  //  message += "Added a new property to EntityTypes in the generated model.";
	  //}

	  //MessageBox.Show(message, caption);
    }

    /// <summary>
    /// Called after a model is updated by the Update Model Wizard.
    /// Note: the Update Model Wizard generates a temporary .edmx document which is then merged with the existing document 
    /// to produce the updated document. The OnAfterModelGenerated() method will be called on the temporary document before 
    /// the merge process begins. This OnAfterModelUpdated() method allows you to make further changes to the document 
    /// after it has been merged with the existing document.
    /// </summary>
    /// <param name="context"></param>
    public void OnAfterModelUpdated(UpdateModelExtensionContext context)
    {
      //
      // context.OriginalDocument = The original XDocument before the Update Model Wizard started.
      //                            An extension cannot modify this document.
      //
      // context.GeneratedDocument = The temporary XDocument that was generated by the Update Model wizard from the database.
      //                             An extension cannot modify this document.
      //
      // context.UpdateModelDocument = The contents of context.OriginalDocument merged with the contents of context.GeneratedDocument.
      //                               An extension cannot modify this document.
      //
      // context.CurrentDocument = The XDocument that will be saved.
      //                           An extension can modify this document. Note that the document may have been modified by another extension's implementation of OnAfterModelUpdated().
      //
      //
      // context.ProjectItem = The EnvDTE.ProjectItem of current .edmx file.
      //
      // context.Project = The EnvDTE.Project that contains the .edmx file.
      //
      // context.WizardKind = The wizard that initiated the .edmx file generation or update process (WizardKind.UpdateModel).
      //
	  //bool efV2Model = IsEntityFrameworkV2Model(context.Project);
	  //String caption = "OnAfterModelGenerated called";
	  //String message = String.Format("An EF v{0} model was updated from the database by the 'Update Model From Database' wizard.\n\n", efV2Model ? 2 : 1);

	  //if (efV2Model)
	  //{
	  //  // Call helper method to add a new property to the generated EF v2 model.
	  //  AddPropertyToModel(context.CurrentDocument);

	  //  message += "Added a new property to EntityTypes in the updated model.";
	  //}

	  //MessageBox.Show(message, caption);
    }

    /// <summary>
    /// Returns true if the specified project targets .NET Framework 4.0; otherwise returns false.
    /// .edmx files in projects that target .NET Framework 4.0 are EF v2 models. Projects that target .NET Framework 3.5 SP1 are EF v1 models.
    /// </summary>
    /// <param name="project"></param>
    /// <returns></returns>
    private bool IsEntityFrameworkV2Model(Project project)
    {
      bool efV2Model = false;
      try
      {
        Property targetFrameworkMoniker = project.Properties.Item("TargetFrameworkMoniker");
        System.Runtime.Versioning.FrameworkName frameworkName = new System.Runtime.Versioning.FrameworkName(targetFrameworkMoniker.Value.ToString());
        efV2Model = (frameworkName.Version.Major == 4);
      }
      catch
      {
        // Nothing to do.
      }
      return efV2Model;
    }

    /// <summary>
    /// Shows how a model generation extension can annotate the generated model with a new property that can be read, displayed and edited by a property extension.
    /// 
    /// Adds a new child XElement to every EntityType element in the generated conceptual model.
    /// The new child XElement is in the same format as properties that are added by a property extension.
    /// </summary>
    /// <param name="document">The generated model (EDMX)</param>
    private void AddPropertyToModel(XDocument document)
    {
      CslaClassTemplate newPropertyValue = CslaClassTemplate.None;

      // Add a new child element, MyNewProperty, as the last child of each EntityType element in the conceptual model. 
      // This child element is known as a "Structured Annotation" and can be accessed with Entity Framework metadata APIs at design time or runtime.
      //
      // For more details see: http://blogs.msdn.com/efdesign/archive/2008/08/12/structural-annotations-one-pager.aspx
      //
      foreach (XElement entityType in document.Descendants(XName.Get("EntityType", "http://schemas.microsoft.com/ado/2008/09/edm")))
      {
        if (entityType.HasElements)
        {
          XElement lastChild = entityType.Elements().Last();
          if (lastChild.Name != Constants._xnCslaClassTemplate)
          {
            entityType.Elements().Last().AddAfterSelf(new XElement(Constants._xnCslaClassTemplate, newPropertyValue.ToString()));
          }
        }
        else
        {
          entityType.Add(new XElement(Constants._xnCslaClassTemplate, newPropertyValue.ToString()));
        }
      }
    }
  }
}